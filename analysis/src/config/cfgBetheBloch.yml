#
# Configuration file for the Bethe-Bloch parameterisation
#

species: ["El", "Pi", "Ka", "Pr", "De", "He"]

betagamma:
  plot: { 
          name: "clSizeCosL_vs_beta",
          title: "#LT Cluster size #GT #times #LT cos #lambda #GT vs #it{beta}; #beta #gamma; #LT Cluster size #GT #times #LT cos #lambda #GT; Counts",
          xVariable: "fBetaGammaPr",
          nXBins: 50,
          xMin: 0,
          xMax: 5,
          xLabel: "#beta",
          yVariable: "fClSizeITSCosLamPr",
          nYBins: 60,
          yMin: 0,
          yMax: 15,
          yLabel: "#LT Cluster size #GT #times #LT cos #lambda #GT",
          type: "TH2F",
          particle: ["all", "El", "Pi", "Ka", "Pr", "De", "He"],
        }
  xMinFit: 0.3
  xMaxFit: 5
  yMinFit: 0
  yMaxFit: 12
  xMinDoubleFit: 0.4
  xMaxDoubleFit: -1.
  sigma_params: {
                  'kp0': -0.181312,
                  'kp1': 0.956085,
                  'kp2': -0.485012,
                }

  signalFit:
    #function: '[0] * [2] * exp( - 0.5 * ( (x - [1]) / [2] )^2 ) * ( 1 + TMath::Erf( [3] * (x - [1]) / [2] ) )' # Crystal Ball
    expr: 'x < ([1] + [3]*[2]) ? [0] * exp( - ( (x - [1]) / (std::sqrt(2) * [2]) )^2 ) : [0] * exp( - (x - [1] - 0.5*[2]*[3]) * [3]/[2])' # Exponentialy Modified Gaussian
    #expr: '[0] * exp(-0.5 * ((x-[1])/[2])^2)'
    norm_idx: 0
    mean_idx: 1
    sigma_idx: 2
    params: 
      {
        0: {
          init: 500,
          opt: 'set',
          limits: [0, 0]
        },
        1: {
          init: 6.5,
          opt: 'limit',
          limits: [2, 10]
        },
        2: {
          init: 0.8,
          opt: 'set',
          limits: [0, 0]
        },
        3: {
          init: 1,
          opt: 'limit',
          limits: [0.7, 2.]
        },
      }
    nParams: 4
    meanParLims: [2., 10.]
  fmFit:
    expr: '[3] * exp(-0.5 * ((x-[4])/[5])^2)'
    #expr: '[4] * exp(-0.5 * ((x-[5])/[6])^2)'
    norm_idx: 3
    mean_idx: 4
    sigma_idx: 5
    params: 
      {
        3: {
          init: 1000,
          opt: 'set',
          limits: [0, 0]
        },
        4: {
          init: 2,
          opt: 'set',
          limits: [1, 3.5]
        },
        5: {
          init: 0.64,
          opt: 'limit',
          limits: [0.2, 1.0]
        },
        #6: {
        #  init: 0.64,
        #  opt: 'limit',
        #  limits: [0.2, 1.0]
        #},
      }
    nParams: 3

  # Fit from the right side (pre-fit)
  prefit: False
  yMinPreFit: [4.7, 4.4, 4.4, 4.5, 4.3, 4.1, 4.1, 4.1, 4, 3.8, 3.8, 3.7, 3.7, 3.5, 3.3, 3.3, 3.3, 3.3, 2.8, 2.8] 
  yMaxPreFit: [12, 12, 12, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

  BBparams: {
              'kp1': -14.5,
              'kp2': -8.64,
              'kp3': 0.04,
              'kp4': 1.58,
              'kp5': 0.83,
            }
  
  plot_nsigma: {
                name: "nsigma_vs_beta",
                title: "n #sigma vs #beta; #beta; n #sigma; Counts",
                xVariable: "fBeta",
                nXBins: 100,
                xMin: -1,
                xMax: 1,
                xLabel: "#beta",
                yVariable: "fNSigmaPr",
                nYBins: 100,
                yMin: -5,
                yMax: 5,
                yLabel: "n #sigma_{ITS, #beta}",
                type: "TH2F",
                particle: ["all", "El", "Pi", "Ka", "Pr", "De", "He"],
               }